generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id            BigInt    @id
  username      String?
  firstName     String?
  lang          String?
  createdAt     DateTime  @default(now())

  profile       Profile?
  preferences   Preferences?

  // Beziehungen für Likes
  likesFrom     Like[]    @relation("likes_from")
  likesTo       Like[]    @relation("likes_to")

  // Beziehungen für Reports
  reportsMade       Report[] @relation("reports_made")
  reportsReceived   Report[] @relation("reports_received")
}

model Profile {
  id          Int       @id @default(autoincrement())
  userId      BigInt    @unique
  displayName String?
  age         Int?
  isAdult     Boolean   @default(false)
  identity    String?
  bioSeek     String?
  visible     Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Interessen/Filter
  audiences   ProfileAudience[]
  // Fotos
  photos      Photo[]
  // Tags
  profileTags ProfileTag[]
}

model Preferences {
  userId    BigInt   @id
  showAdult Boolean  @default(false)
  minAge    Int?
  maxAge    Int?

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id          Int      @id @default(autoincrement())
  fromUserId  BigInt
  toUserId    BigInt
  createdAt   DateTime @default(now())

  fromUser    User     @relation("likes_from", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser      User     @relation("likes_to",   fields: [toUserId],   references: [id], onDelete: Cascade)

  @@unique([fromUserId, toUserId])
  @@index([toUserId])
}

model Report {
  id               Int      @id @default(autoincrement())
  reporterUserId   BigInt
  reportedUserId   BigInt
  reason           String?
  createdAt        DateTime @default(now())

  reporterUser     User     @relation("reports_made",     fields: [reporterUserId], references: [id], onDelete: Cascade)
  reportedUser     User     @relation("reports_received", fields: [reportedUserId], references: [id], onDelete: Cascade)

  @@index([reportedUserId])
}

model Photo {
  id        Int      @id @default(autoincrement())
  profileId Int
  fileId    String
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())

  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
}

model ProfileAudience {
  id        Int     @id @default(autoincrement())
  profileId Int
  audience  String

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, audience])
  @@index([audience])
}

model Tag {
  id          Int          @id @default(autoincrement())
  label       String
  slug        String       @unique            // lowercase/normalisiert
  profileTags ProfileTag[]
}

model ProfileTag {
  profileId Int
  tagId     Int

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([profileId, tagId])
  @@index([tagId])
}
