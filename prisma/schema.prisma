generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              BigInt    @id
  username        String?
  firstName       String?
  lang            String?
  createdAt       DateTime  @default(now())

  profile         Profile?
  preferences     Preferences?

  // Likes
  likesFrom       Like[]    @relation("likes_from")
  likesTo         Like[]    @relation("likes_to")

  // Reports
  reportsMade     Report[]  @relation("reports_made")
  reportsReceived Report[]  @relation("reports_received")

  // Moderation actions
  modActions      ModAction[] @relation("mod_actor")
}

model Profile {
  id              Int       @id @default(autoincrement())
  userId          BigInt    @unique
  displayName     String?
  age             Int?
  isAdult         Boolean   @default(false)
  identity        String?
  bioSeek         String?
  visible         Boolean   @default(true)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // ---- Location ----
  lat             Float?
  lon             Float?
  city            String?
  hasLocation     Boolean   @default(false)

  // ---- Moderation ----
  suspended       Boolean   @default(false)
  suspendedAt     DateTime?
  suspendedReason String?
  suspendedByUserId BigInt?
  shadowbanned    Boolean   @default(false)

  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Beziehungen
  audiences       ProfileAudience[]
  photos          Photo[]
  profileTags     ProfileTag[]

  @@index([visible])
  @@index([suspended])
  @@index([shadowbanned])
}

model Preferences {
  userId    BigInt   @id
  showAdult Boolean  @default(false)
  minAge    Int?
  maxAge    Int?
  radiusKm  Int?     // Distanz-Filter (km)

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
  id          Int      @id @default(autoincrement())
  fromUserId  BigInt
  toUserId    BigInt
  createdAt   DateTime @default(now())

  fromUser    User     @relation("likes_from", fields: [fromUserId], references: [id], onDelete: Cascade)
  toUser      User     @relation("likes_to",   fields: [toUserId],   references: [id], onDelete: Cascade)

  @@unique([fromUserId, toUserId])
  @@index([toUserId])
}

model Report {
  id               Int      @id @default(autoincrement())
  reporterUserId   BigInt
  reportedUserId   BigInt
  reason           String?
  createdAt        DateTime @default(now())

  reporterUser     User     @relation("reports_made",     fields: [reporterUserId], references: [id], onDelete: Cascade)
  reportedUser     User     @relation("reports_received", fields: [reportedUserId], references: [id], onDelete: Cascade)

  @@index([reportedUserId])
}

model Photo {
  id              Int      @id @default(autoincrement())
  profileId       Int
  fileId          String
  isPrimary       Boolean  @default(false)
  createdAt       DateTime @default(now())

  // Moderation
  removed         Boolean  @default(false)
  removedAt       DateTime?
  removedReason   String?
  removedByUserId BigInt?

  profile         Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([removed])
}

model ProfileAudience {
  id        Int     @id @default(autoincrement())
  profileId Int
  audience  String

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, audience])
  @@index([audience])
}

model Tag {
  id          Int          @id @default(autoincrement())
  label       String
  slug        String       @unique  // normalized lowercase
  profileTags ProfileTag[]
}

model ProfileTag {
  profileId Int
  tagId     Int

  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([profileId, tagId])
  @@index([tagId])
}

model ModAction {
  id              Int      @id @default(autoincrement())
  createdAt       DateTime @default(now())

  actorUserId     BigInt
  action          String   // e.g. PROFILE_SUSPEND | PROFILE_UNSUSPEND | SHADOWBAN_ON | SHADOWBAN_OFF | PHOTO_REMOVE
  reason          String?

  targetUserId    BigInt?
  targetProfileId Int?
  targetPhotoId   Int?

  actor           User     @relation("mod_actor", fields: [actorUserId], references: [id], onDelete: Cascade)

  @@index([createdAt])
  @@index([action])
  @@index([targetUserId])
  @@index([targetProfileId])
  @@index([targetPhotoId])
}
